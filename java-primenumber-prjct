// PrimeNumberChecker.java

public class PrimeNumberChecker {

    /**
     * Checks if a given number is a prime number.
     *
     * @param number The integer to check.
     * @return true if the number is prime, false otherwise.
     */
    public static boolean isPrime(int number) {
        // Rule 1: Numbers less than or equal to 1 are NOT prime.
        if (number <= 1) {
            return false;
        }

        // Rule 2: 2 is the only even prime number.
        if (number == 2) {
            return true;
        }

        // Rule 3: Any other even number (greater than 2) is NOT prime,
        // because it will be divisible by 2.
        if (number % 2 == 0) {
            return false;
        }

        // Rule 4: For odd numbers, we only need to check for divisibility by
        // other odd numbers up to the square root of the number.
        // We start from 3 and increment by 2 (to check only odd numbers).
        for (int i = 3; i * i <= number; i += 2) {
            // If the number is divisible by 'i', then it's not prime.
            if (number % i == 0) {
                return false;
            }
        }

        // If no divisors were found, the number is prime.
        return true;
    }

    /**
     * Main method to demonstrate finding prime numbers.
     * This will print all prime numbers up to a specified limit.
     */
    public static void main(String[] args) {
        int limit = 50; // We want to find prime numbers up to 50

        System.out.println("Prime numbers up to " + limit + ":");

        // Loop through each number from 1 to the limit
        for (int i = 1; i <= limit; i++) {
            // Check if the current number 'i' is prime using our isPrime method
            if (isPrime(i)) {
                // If it's prime, print it
                System.out.print(i + " ");
            }
        }
        System.out.println(); // Print a new line at the end
    }
}
