<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Login Page</title>
    <!-- Tailwind CSS CDN for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom font for a clean look */
        body {
            font-family: "Inter", sans-serif;
        }
        /* Ensure error messages have a consistent height to prevent layout shifts */
        .error-message {
            min-height: 1.25rem; /* Equivalent to text-base line-height */
            display: block; /* Ensures it takes up space */
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen bg-gray-100 p-4">
    <div class="bg-white p-8 rounded-xl shadow-lg w-full max-w-md">
        <h2 class="text-3xl font-bold text-center text-gray-800 mb-8">Employee Login</h2>
        <form id="loginForm" class="space-y-6">
            <div>
                <label for="employeeName" class="block text-gray-700 text-sm font-semibold mb-2">Employee Name:</label>
                <input
                    type="text"
                    id="employeeName"
                    name="employeeName"
                    oninput="validateName()"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out"
                    placeholder="Enter full name"
                >
                <span id="nameError" class="error-message text-red-600 text-sm mt-1"></span>
            </div>
            <div>
                <label for="employeeId" class="block text-gray-700 text-sm font-semibold mb-2">Employee ID:</label>
                <input
                    type="text"
                    id="employeeId"
                    name="employeeId"
                    oninput="validateId()"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 ease-in-out"
                    placeholder="Enter employee ID"
                >
                <span id="idError" class="error-message text-red-600 text-sm mt-1"></span>
            </div>
            <button
                type="submit"
                class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition duration-200 ease-in-out shadow-md"
            >
                Login
            </button>
        </form>
    </div>

    <script>
        /**
         * Validates the Employee Name input field.
         * Allows only alphabets and spaces. Displays an error message if invalid.
         */
        function validateName() {
            const nameInput = document.getElementById('employeeName');
            const nameError = document.getElementById('nameError');
            const nameValue = nameInput.value;

            // Regular expression to match only alphabets (a-z, A-Z) and spaces (\s)
            const regex = /^[a-zA-Z\s]*$/;

            if (!regex.test(nameValue)) {
                nameError.textContent = 'Only alphabets and spaces are allowed.';
                nameInput.classList.add('border-red-500'); // Add red border for error
                nameInput.classList.remove('focus:ring-blue-500'); // Remove blue ring on error
                nameInput.classList.add('focus:ring-red-500'); // Add red ring on error focus
            } else {
                nameError.textContent = ''; // Clear error message
                nameInput.classList.remove('border-red-500'); // Remove red border
                nameInput.classList.remove('focus:ring-red-500'); // Remove red ring
                nameInput.classList.add('focus:ring-blue-500'); // Restore blue ring
            }
        }

        /**
         * Validates the Employee ID input field.
         * Allows only numbers. Displays an error message if invalid.
         */
        function validateId() {
            const idInput = document.getElementById('employeeId');
            const idError = document.getElementById('idError');
            const idValue = idInput.value;

            // Regular expression to match only digits (0-9)
            const regex = /^[0-9]*$/;

            if (!regex.test(idValue)) {
                idError.textContent = 'Only numbers are allowed.';
                idInput.classList.add('border-red-500'); // Add red border for error
                idInput.classList.remove('focus:ring-blue-500'); // Remove blue ring on error
                idInput.classList.add('focus:ring-red-500'); // Add red ring on error focus
            } else {
                idError.textContent = ''; // Clear error message
                idInput.classList.remove('border-red-500'); // Remove red border
                idInput.classList.remove('focus:ring-red-500'); // Remove red ring
                idInput.classList.add('focus:ring-blue-500'); // Restore blue ring
            }
        }

        /**
         * Handles the form submission.
         * Prevents submission if there are validation errors or empty fields.
         */
        document.getElementById('loginForm').addEventListener('submit', function(event) {
            // Re-run validation for both fields to catch any last-minute issues
            validateName();
            validateId();

            const nameError = document.getElementById('nameError').textContent;
            const idError = document.getElementById('idError').textContent;
            const employeeNameValue = document.getElementById('employeeName').value.trim(); // Trim whitespace
            const employeeIdValue = document.getElementById('employeeId').value.trim(); // Trim whitespace

            // Check if any error messages are present or if fields are empty
            if (nameError !== '' || idError !== '' || employeeNameValue === '' || employeeIdValue === '') {
                event.preventDefault(); // Stop the form from submitting
                // Instead of alert(), we can show a more user-friendly message on the page
                // For this simple example, we'll use a temporary message box.
                showMessageBox('Please correct the errors and fill in all fields before logging in.', 'red');
            } else {
                // If all validations pass and fields are not empty
                event.preventDefault(); // Prevent default submission to handle it with JS
                showMessageBox('Login successful! (In a real application, data would be sent to a server.)', 'green');
                // In a real application, you would send the data to your backend server here
                // Example: fetch('/api/login', { method: 'POST', body: JSON.stringify({ name: employeeNameValue, id: employeeIdValue }) });
            }
        });

        /**
         * Displays a temporary message box on the page.
         * @param {string} message - The message to display.
         * @param {string} type - 'green' for success, 'red' for error.
         */
        function showMessageBox(message, type) {
            let messageBox = document.getElementById('messageBox');
            if (!messageBox) {
                messageBox = document.createElement('div');
                messageBox.id = 'messageBox';
                messageBox.classList.add('fixed', 'top-4', 'left-1/2', '-translate-x-1/2', 'px-6', 'py-3', 'rounded-lg', 'shadow-lg', 'font-semibold', 'z-50', 'transition-all', 'duration-300', 'ease-in-out', 'opacity-0', 'transform', '-translate-y-full');
                document.body.appendChild(messageBox);
            }

            messageBox.textContent = message;
            messageBox.classList.remove('bg-green-500', 'bg-red-500', 'text-white');

            if (type === 'green') {
                messageBox.classList.add('bg-green-500', 'text-white');
            } else if (type === 'red') {
                messageBox.classList.add('bg-red-500', 'text-white');
            }

            // Show the message box
            messageBox.classList.remove('opacity-0', '-translate-y-full');
            messageBox.classList.add('opacity-100', 'translate-y-0');

            // Hide the message box after 3 seconds
            setTimeout(() => {
                messageBox.classList.remove('opacity-100', 'translate-y-0');
                messageBox.classList.add('opacity-0', '-translate-y-full');
            }, 3000);
        }
    </script>
</body>
</html>
